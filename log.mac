; vim: ft=nasm

%ifndef _logasm_log_mac_
%define _logasm_log_mac_

extern strlen
extern hex2decimal

section .bss
  LINEBUFFER resb 32

section .text
  DEBUG:        db 27,"[0;34mDEBUG ",27,"[0m"
  DEBUG_LEN     equ $-DEBUG
  INFO:         db 27,"[0;32mINFO  ",27,"[0m"
  INFO_LEN      equ $-INFO
  WARN:         db 27,"[0;91mWARN  ",27,"[0m"
  WARN_LEN      equ $-WARN
  ERROR:        db 27,"[0;31mERROR ",27,"[0m"
  ERROR_LEN     equ $-ERROR
  LOCATION:     db 27,"[0;90m"
  LOCATION_LEN  equ $-LOCATION
  NEWLINE       db 10
  NEWLINE_LEN   equ $-NEWLINE
  COLON:        db ":"
  COLON_LEN     equ $-COLON
  ATLOC:        db " at"
  ATLOC_LEN     equ $-ATLOC

%macro log_data 0
  LOG__FILE:     db " ", __FILE__,0
  LOG__FILE_LEN  equ $-LOG__FILE
%endmacro

%macro log__push_all 1-*
  %rep %0
    push %1
    %rotate 1
  %endrep
%endmacro

%macro log__pop_all 1-*
  %rep %0
    %rotate -1
    pop %1
  %endrep
%endmacro

%macro log__sys_write 2 ;(s, len)
  log__push_all eax, ebx, ecx, edx
  mov eax, 4
  mov ebx, 1
  mov edx, %2
  mov ecx, %1
  int 80H
  log__pop_all eax, ebx, ecx, edx
%endmacro

%macro log__location 0
  log__push_all eax, ebx, ecx, edx, esi

  log__sys_write LOCATION, LOCATION_LEN
  log__sys_write ATLOC, ATLOC_LEN
  log__sys_write LOG__FILE, LOG__FILE_LEN
  log__sys_write COLON, COLON_LEN

  mov eax, __LINE__
  mov esi, LINEBUFFER + 32
  call hex2decimal

  ; write out lineno which is @edx
  mov eax, 4
  mov ebx, 1
  mov ecx, esi
  int 80H

  log__pop_all eax, ebx, ecx, edx, esi
%endmacro

%macro log_debug 2
  log__sys_write DEBUG, DEBUG_LEN
  log__sys_write %1, %2
  log__location
  log__sys_write NEWLINE, NEWLINE_LEN

%endmacro

%macro log_debug 1
  log__push_all edi, edx
  mov edi, %1
  call strlen
  log_debug %1, edx
  log__pop_all edi, edx
%endmacro

%macro log_info 2
  log__sys_write INFO, INFO_LEN
  log__sys_write %1, %2
  log__location
  log__sys_write NEWLINE, NEWLINE_LEN
%endmacro

%macro log_info 1
  log__push_all edi, edx
  mov edi, %1
  call strlen
  log_info %1, edx
  log__pop_all edi, edx
%endmacro

%macro log_warn 2
  log__sys_write WARN, WARN_LEN
  log__sys_write %1, %2
  log__location
  log__sys_write NEWLINE, NEWLINE_LEN
%endmacro

%macro log_warn 1
  log__push_all edi, edx
  mov edi, %1
  call strlen
  log_warn %1, edx
  log__pop_all edi, edx
%endmacro

%macro log_error 2
  log__sys_write ERROR, ERROR_LEN
  log__sys_write %1, %2
  log__location
  log__sys_write NEWLINE, NEWLINE_LEN
%endmacro

%macro log_error 1
  log__push_all edi, edx
  mov edi, %1
  call strlen
  log_error %1, edx
  log__pop_all edi, edx
%endmacro

%endif
